pipeline:
  name: dockerimage-pull
  identifier: dockerimagepull
  projectIdentifier: default_project
  orgIdentifier: default
  tags: {}
  stages:
    - stage:
        name: winrm-stage
        identifier: winrmstage
        description: ""
        type: Deployment
        spec:
          deploymentType: WinRm
          service:
            serviceRef: dockersvcpull
            serviceInputs:
              serviceDefinition:
                type: WinRm
                spec:
                  artifacts:
                    primary:
                      primaryArtifactRef: <+input>
                      sources: <+input>
          environment:
            environmentRef: winrmenv
            deployToAll: false
            infrastructureDefinitions:
              - identifier: wnrminfra
          execution:
            steps:
              - step:
                  type: Command
                  name: Command_1
                  identifier: Command_1
                  spec:
                    onDelegate: false
                    environmentVariables: []
                    outputVariables: []
                    commandUnits:
                      - identifier: run
                        name: run
                        type: Script
                        spec:
                          shell: PowerShell
                          source:
                            type: Inline
                            spec:
                              script: |-
                                $username = "admin"
                                $password = "cmVmdGtuOjAxOjE3MTg4ODk4NTk6c3Eza3dqR2xvRUY2M0N6Vm1NeHprU0tDTENT"

                                docker login -u $username --password-stdin $password premartifactory.jfrog.io

                                docker pull premartifactory.jfrog.io/test-docker/hello-world:latest
                                 
                        shell: PowerShell
                  timeout: 10m
                  strategy:
                    repeat:
                      items: <+stage.output.hosts>
            rollbackSteps:
              - stepGroup:
                  name: Phase Rollback
                  identifier: Phase_Rollback
                  strategy:
                    repeat:
                      items: <+stage.output.hosts>
                      maxConcurrency: 1
                      partitionSize: 1
                      unit: Count
                  steps:
                    - stepGroup:
                        name: Phase Group Rollback
                        identifier: phase_group_rollback
                        strategy:
                          repeat:
                            items: <+repeat.partition>
                        steps:
                          - step:
                              name: Rollback
                              identifier: Rollback
                              type: Command
                              timeout: 10m
                              spec:
                                onDelegate: false
                                environmentVariables:
                                  - name: ReleaseNo
                                    type: String
                                    value: ""
                                  - name: ServiceName
                                    type: String
                                    value: ""
                                  - name: AppPoolName
                                    type: String
                                    value: DefaultAppPool
                                  - name: AppPoolDotNetVersion
                                    type: String
                                    value: v4.0
                                  - name: DownloadDirectory
                                    type: String
                                    value: $env:TEMP
                                  - name: AppPhysicalDirectory
                                    type: String
                                    value: $env:SYSTEMDRIVE
                                outputVariables: []
                                commandUnits:
                                  - identifier: Setup_Runtime_Paths_Rollback
                                    name: Setup Runtime Paths
                                    type: Script
                                    spec:
                                      shell: PowerShell
                                      source:
                                        type: Inline
                                        spec:
                                          script: |-
                                            # Creates destination directory if it doesn't exist
                                            $DirectoryName = "%USERPROFILE%\<+service.name>\<+env.name>"
                                            If (!(Test-Path $DirectoryName)) {
                                              Write-Host "Creating directory" $DirectoryName
                                              New-Item $DirectoryName -ItemType Directory
                                            }
                                  - identifier: Download_Artifact_Rollback
                                    name: Download Artifact Rollback
                                    type: DownloadArtifact
                                    spec:
                                      sourceType: Artifact
                                      destinationPath: "%USERPROFILE%\\<+service.name>\\<+env.name>"
                                  - identifier: Expand_Artifact_Rollback
                                    name: Expand Artifact Rollback
                                    type: Script
                                    spec:
                                      shell: PowerShell
                                      source:
                                        type: Inline
                                        spec:
                                          script: |-
                                            $serviceName="<+service.name>"
                                            $releaseId="$env:ReleaseNo"
                                            $artifactJustFileName = Split-Path "<+artifact.artifactPath>" -leaf
                                            $artifactFilename = "$HOME\<+service.name>\<+env.name>" + "\" + $artifactJustFileName
                                            $appPhysicalDirectory="$env:AppPhysicalDirectory" + "\Artifacts\" + $serviceName + "\release-" + $releaseId

                                              # Check if artifact is File or Folder structure
                                            $isFile = Test-Path -Path $artifactFilename -PathType Leaf
                                            $isFolder = Test-Path -Path $artifactFilename -PathType Container
                                            if ($isFile -and ([IO.Path]::GetExtension($artifactFilename) -eq ".zip" ))
                                            {
                                              Write-Host "Extracting package from" $artifactFilename "to" $appPhysicalDirectory
                                              Expand-Archive -Path $artifactFilename -DestinationPath $appPhysicalDirectory -Force
                                            }
                                            else
                                            {
                                              Write-Host "Artifact type is not a zip file. Skipping extract."
                                            }
                                            if ($isFolder)
                                            {
                                              Write-Host "Copying folder from" $artifactFilename "to" $appPhysicalDirectory
                                              Copy-Item -Path $artifactFilename -Filter "*.*" -Recurse -Destination $appPhysicalDirectory -Container
                                            }
                                            Write-Host "Done."
                                  - identifier: Copy_Config_Rollback
                                    name: Copy Config Rollback
                                    type: Copy
                                    spec:
                                      sourceType: Config
                                      destinationPath: "%USERPROFILE%\\<+service.name>\\<+env.name>"
                                  - identifier: Create_Virtual_Directory_Rollback
                                    name: Create Virtual Directory Rollback
                                    type: Script
                                    spec:
                                      shell: PowerShell
                                      source:
                                        type: Inline
                                        spec:
                                          script: |-
                                            Import-Module WebAdministration

                                            $siteName="Default Web Site"
                                            $releaseId="$env:ReleaseNo"
                                            $virtualDirectoryName="<+service.name>"
                                            $appPhysicalDirectory="$env:AppPhysicalDirectory" + "\Artifacts\" + $virtualDirectoryName + "\release-" + $releaseId

                                              # Copy configs to application directory
                                            $userProfile = "$env:userprofile"
                                            $targetPath="$userProfile\\<+service.name>\\<+env.name>\\runtime"
                                            if(!(Test-Path "$targetPath"))
                                            {
                                              New-Item -ItemType Directory -Path "$targetPath"
                                              Write-Host "$targetPath Folder Created Successfully."
                                            }
                                            else
                                            {
                                              Write-Host "$targetPath Folder already exists."
                                            }
                                            Copy-Item -Path "$targetPath\\*.config" -Destination $appPhysicalDirectory -Force

                                            Write-Host "Creating Virtual Directory" $virtualDirectoryName ".."
                                            $VirtualDirPath = 'IIS:\Sites\' + $siteName + '\' + $virtualDirectoryName
                                            if(Test-Path "$VirtualDirPath")
                                            {
                                              New-Item -Path $VirtualDirPath -Type VirtualDirectory -PhysicalPath $appPhysicalDirectory -Force
                                            } else {
                                              Write-Host "Virtual dir not found:" $VirtualDirPath
                                            }                              

                                            Write-Host "Done."
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
